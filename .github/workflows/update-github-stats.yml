name: Generate GitHub Stats

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight every day
  workflow_dispatch:  # Allows manual triggering

jobs:
  generate-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Generate GitHub stats
        id: stats
        run: |
          # Get the stats
          python -c "
          import requests
          import json
          import os
          import re
          
          # Get GitHub username and token
          username = os.environ.get('GITHUB_USERNAME', 'zakaBouj')
          token = os.environ.get('GITHUB_TOKEN', '')
          
          # Function to make API requests
          def github_api_request(url):
              headers = {'Authorization': f'token {token}'} if token else {}
              response = requests.get(url, headers=headers)
              if response.status_code == 200:
                  return response.json()
              return None
          
          # Get basic stats
          user_data = github_api_request(f'https://api.github.com/users/{username}')
          if not user_data:
              user_data = {'public_repos': 0, 'followers': 0}
              
          # Get stars
          stars = 0
          repos = github_api_request(f'https://api.github.com/users/{username}/repos?per_page=100')
          if repos:
              stars = sum(repo['stargazers_count'] for repo in repos)
          
          # Get total commits (estimated)
          commits = 0
          if repos:
              for repo in repos[:5]:  # Limit to 5 repos to avoid rate limits
                  try:
                      repo_name = repo['name']
                      headers = {'Authorization': f'token {token}'} if token else {}
                      response = requests.get(f'https://api.github.com/repos/{username}/{repo_name}/commits?author={username}&per_page=1', headers=headers)
                      
                      if response.status_code == 200 and 'link' in response.headers:
                          link = response.headers['link']
                          if 'rel=\"last\"' in link:
                              match = re.search(r'[&?]page=(\d+)', link)
                              if match:
                                  commits += int(match.group(1))
                              else:
                                  commits += 1  # Fallback if we can't parse the page number
                          else:
                              commits += len(response.json())  # If there's no last page link
                      elif response.status_code == 200:
                          commits += len(response.json())  # Count what we got
                  except Exception as e:
                      print(f\"Error getting commits for {repo['name']}: {e}\")
                      # Continue with other repos
          
          # Create markdown for stats
          stats = f'''
          ## GitHub Stats (updated: {os.environ.get('GITHUB_RUN_ID', 'locally')})
          
          ![Repositories](https://img.shields.io/badge/Repositories-{user_data['public_repos']}-blue?style=flat&logo=github)
          ![Stars](https://img.shields.io/badge/Stars-{stars}-yellow?style=flat&logo=github)
          ![Followers](https://img.shields.io/badge/Followers-{user_data['followers']}-lightgrey?style=flat&logo=github)
          
          ![Total Commits](https://img.shields.io/badge/Total%20Commits-{commits}+-brightgreen?style=flat&logo=git)
          '''
          
          # Print the stats to be captured by GitHub Actions
          print(stats)
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
          
      - name: Output GitHub Stats
        run: |
          # Store stats in file for easy access
          echo "${{ steps.stats.outputs.stdout }}" > github_stats.md
          
          # Display stats in job summary
          echo "## GitHub Stats Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.stats.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Copy these stats to your README.md file in the 'Live Github Stats' section" >> $GITHUB_STEP_SUMMARY
          
          # Also output to logs
          echo "==================== GITHUB STATS ===================="
          echo "${{ steps.stats.outputs.stdout }}"
          echo "====================================================="
          echo "Copy these stats to your README.md file in the 'Live Github Stats' section"